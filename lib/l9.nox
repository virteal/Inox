~| l9.nox
 |   Inox LinkOS v9 kernel
 |
 | JHR, 2023/05/07, from l8.js
 |
 |~

~|

The l8 kernel was a single-threaded, event-driven kernel. The github repository is at https://github.com/virteal/l8

 |~

to with-debug-info     debug-info/enable/log.
to without-debug-info  debug-info/disable/log.

normal-debug with-debug-info

to thing  >thing-todo FATAL( "thing class cannot " & $thing-todo )

to class{
  with class-name/ class-block/ parameters
  /thing >class-superclass
  $class-block .run

to superclass  >class-superclass!

to does{  define-verb

to class-method{
  with class-method-name/ class-method-block/ parameters
  ( $class-name & "." & $class-method-name ) >verb-name
  define-verb( $verb-name as-tag, $class-method-block )

to method{
  with method-name/ method-block/ parameters
  ( $class-name & "." & $method-name ) >verb-name
  define-verb( $verb-name as-tag, $method-block )

to it-method{
  with method-name/ method-block/ parameters
  ( $class-name & "." & $method-name ) >verb-name
  attach( $method-block, { run-with-it } ) >method-bounded-block
  define-verb( $verb-name as-tag, $method-bounded-block )

to class-attribute
  >attribute-name
  ( $class-name & "." & $attribute-name ) >verb-name
  make-global( $verb-name as-tag, the-void )

to attribute
  >attribute-name
  ( $class-name & "." & $attribute-name ) >verb-name
  attach( $attribute-name, { object.get } ) >verb-getter
  ( $verb-name & "!" ) >verb-setter-name
  attach( $attribute-name, { object.set } ) >verb-setter
  define-verb( $verb-name        as-tag, $verb-getter )
  define-verb( $verb-setter-name as-tag, $verb-setter )

to read-only-attribute   attribute
to write-only-attribute  attribute.


global: /l9-next-id is: 0 ;
global: /l9-root    is: the-void ;

to drop-with    swap, assert{ dup /with = }, drop
to with-length  /with data-index
to with-length{ >control, with-length, control>, run, drop-with

to array[]        0 :array, make-extensible-object
to list[]         0 :list,  make-extensible-object
to stack[]        0 :stack, make-extensible-object
to queue[]        0 :queue, make-extensible-object
to map[]          0 :map,   make-extensible-object
to set[]          0 :set,   make-extensible-object
to array.push     stack.push
to list.push      stack.push
to array.pop      stack.pop
to list.pop       stack.pop

to make-l9-task
  with parent/ fork?/ spawn?/ parameters
  l9-next-id ++ l9-next-id!
  with
    l9-next-id :id
    ""         :label
    false      :a-fork?
    false      :a-spawn?
    false      :done?
    false      :canceled?
    false      :should-stop?
    $parent    :parent
    array[]    :subtasks
    array[]    :forks
    array[]    :fork-results
    0          :fork-parent-index
  with-length{ :l9-task make-object }
  if: $parent something? then: {
    _l9-task dup .parent> .subtasks> .push
  } else: {
    _l9-task l9-root!
    _l9-task set-current-l9-task
    "root" _l9-task .label!
  };

to l9-task.superclass  /thing
to l9-task.class       /l9-task
to l9-task             thing

to l9-initialize
  l9-task/ class{
    thing/         superclass
    current/       class-method{ l9 }
    label/         attribute
    should-stop?/  read-only-attribute
    done?/         read-only-attribute
    cancel/        it-method{ true it .>canceled?!   }
    canceled?/     method{ .$canceled? }
    should-stop/   method{ true swap .>should-stop?! }
    a-fork?/       read-only-attribute
    a-spawn?/      read-only-attribute
  }
  make-l9-task( _, false, false ), drop.

l9-initialize

to test-l9
  assert{ ( l9-root .label = "root" ) }
  l9 .should-stop
  assert{ l9-root .should-stop? }
  l9 .cancel
  assert{ l9-root .canceled? }
  assert{ ( l9-root not .done? ) }

test-l9
