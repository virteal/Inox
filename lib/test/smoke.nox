#!/bin/inox
#  smoke.nox
#    if it terminates, not all hope is lost
#
# December 6 2022 by jhr, extracted from lib/inox.ts, adding oo stuff
# January 11 2022 by jhr, extract to lib/bootstrap.nox

inox-dialect

to scope
~~ Helper to setup a scope for local variables
~~ ToDo: make it primitive?
  R>
    /it         >R
    #forget-it# >R
  >R


to local  the-void make-local.

to test ~| name |~
~~ Helper to test verbs. It runs the test/xxx testing verb
  "Testing " prefix out
  /test-sentinel, over
  "test/" swap text.join, .run()
  ~~ checks that stack is unchanged, ie sentinel is still at the top
  /test-sentinel <> { out( "Stack mismatch!" ) FATAL } if
  "End of test " prefix out
  drop


to debug-test ~| name |~
 ~~ Helper for tests that needs to be debugged
  scope
  >test-name
  out( "Testing " & $test-name )
  verb.from( "test/" & $test-name )
  dup, .definition(), definition-to-text, out
  debug, .run(), normal-debug
  ~~ ToDo: developer must also check that data stack is unchanged
  out( "End of debug-test for " & test-name> )
  FATAL


To stack-effect-checker  ~| block expected-offset |~
~~ check the side effect of a block about the stack depth
  scope
  ~~ remove 3 because of TOS value, effect offset & block parameter
  ( TOS - 3 )
  ~~ apply the offset to compute what the final TOS should be
  + >expected-tos
  ~~ run block with it
  .run()
  ( TOS - 1 ) >final-tos
  If $final-tos not= $expected-tos Then
    out(
      "stack-effect-checker: expected " & $expected-tos
      & " but got " & $final-tos
      & ", delta is " & ( $final-tos - $expected-tos )
    )
    If $final-tos > $expected-tos Then
      out( "stack-effect-checker: too many items on stack" )
    Else
      out( "stack-effect-checker: too few items on stack" )
    EndIf
    FATAL
  EndIf

to stack-effect-neutral{ 0    stack-effect-checker
to stack-effect{         swap stack-effect-checker

to test/stack-effect
  stack-effect-neutral{ 1 2 3, 3 drops }
  "a", "b", -2 stack-effect{ drop drop }
stack-effect/test


To output-meet-expectation?
~~ is the output of TOS matching the expected output?
  capture/enable/log, finally{ capture/disable/log }
  inox-out
  If $test-expectation expect/log Then
    true
  Else
    inox-out( "EXPECTED " & $test-expectation & "." )
    false
  EndIf

to test-output{  ~| xx text block -- xx |~
~~ expect text to match the output of the block
  scope, >test-block, >test-expectation
  ~~ duplicate xx to be able to replay the block in case of mismatch
  dup
  $test-block .run()
  If not output-meet-expectation? Then
    ~~ redo, with the debugger this time
    $test-block debug .run()
    inox-out
    test-expectation>
    ~~ developper should now compare the actual output and the TOS
    debugger
    ~~ ToDo: should try to restore a valid stack
    FATAL
  Else
    drop
  EndIf

to test/test-output
  stack-effect-neutral{
    "Hi" test-output{ "Hi" }
  }
test-output/test


to point.make  x:0 y:0 point:3 make-object

to test/point
  point.make
  dump
  1 _point .x!  ~~ ToDo: _point x:1 .! or even x:1 .!
  2 _point .y!
  out( "( x:" & _point .x & ", y:" & _point .y & " )" )
  drop  ~~ forget point object
point/test


to point.out  method: { out( "( x:" & it .x & ", y:" & it .y & " )" ) };.

to test/method-call
  point.make
  _point .:out
  _point .out()
  drop  ~~ forget point object
method-call/test


to test/it-operations
  0 it{
    out( "Initial it should be 0, is " & it )
    increment-it!
    out( "Incremented it should be 1, is " & ii )
    decrement-it!
    out( "Decremented it should be 0, is " & ii )
    10 it!
    out( "New value of it should be 10, is " & it )
    out( "++it! should be 11, is " & ++it! )
    out( "it++! should be 11, is " & it++! )
    out( "it--! should be 12, is " & it--! )
    out( "--it! should be 10, is " & --it! )
    out( "it should be 10, is "    & it    )
  }
it-operations/test


to test/false-while
  while: { false } do: { out( "!!! never reached" ) };
false-while/test


to test/times-do
  times: 3 do: { out( "Time goes on" ) } ;
times-do/test


to swap/  with /a /b  /{ a> >A, b> >B, B> A> }.

to test/swap/
  2 3 swap/()
  "2 3 swap/(), top should be 2, is "  prefix out
  if: <> 2 then: { out( "Expected 2 but got " prefix ) debugger };
  "2 3 swap/(), next should be 3, is " prefix out drop
  swap/( 4, 5 )
  "swap/( 4, 5 ), top should be 4, is "  prefix out drop
  "swap/( 4, 5 ), next should be 5, is " prefix out drop
"swap/" test


to test/break
  while: { true } do: { break }. ~~ ToDo: issue with dot, use token-debugger
break/test


to test/forever-while
  while: { true } do: {
    out( "forever" )
    while: { true } do: {
      out( "deeper" )
      while: { true } do: {
        out( "to the limit" )
        break
        out( "!!! never reached, to the limit" )
      };
      break
      out( "!!! never reach, deeper" )
    };
    break
    out( "!!! never reached, forever" )
  };
  out( "test forever ok" )
forever-while/test


to test/loop-break
  1 it{
    loop: {
      out( "loop-while body" )
      out( "Hello loop " & it )
      decrement-it!
      if: it <0 then: { break };
    };
  }
loop-break/test


to say:to:  swap out out( " " ) out.

to hello out( "hello world!" ).


forth-dialect ( forth )
: HELLO CR ." HELLO forth world!" ;
inox-dialect  ~~ back to inox


to test/HELLO
  say: "Hello" to: "Smalltalk world!";
  "HELLO" text.run
  "HELLO" definition run
  { HELLO } run
  true { hello } if
  if: true then: {
    HELLO
  } else: {
    hello
  };
HELLO/test


to test/loop1
  0 it{
    3 it!
    while: { decrement-it!, it >0 } do: {
      if:    it % 2 =0
      then:  { out( it & " is even" ) }
      else:  { out( it & " is odd"  ) } ;
    };
    out( "test loop1 ok 1" )
    times: 3 do: {
      out( "bravo" )
    } ;
    out( "test loop1 ok 2" )
    loop: {
      out( "great" )
      break
    } ;
    out( "test loop1 ok 3, all ok" )
  }
loop1/test


To test/Loop2
  Scope
    3 it!
    While --it! >0 Do
      If it % 2 =0 Then
        out( it & " is even" )
      Else
        out( it & " is odd" )
      EndIf
    EndWhile
    Times 3 Loop
      out( "bravo" )
    EndLoop
    Loop
      out( "great" )
      Break
    EndLoop
    Loop
      out( "wonder" )
      Break
    EndLoop
  EndScope

Loop2/test

set-literate: true;

In order
  To test/literate
programming experimental mode, I just need to make sure that this test-literal verb does no more than
  Out( "test-literate ok" ).

So let's try with literate/test that should invoke the test verb with the tag literate as parameter
  Literate/Test

Please note that literate code is ok with lowercase verbs only, it does not work with camelcase verbs nor with punctation, except for the , that is non significant in all cases and there for cosmetic reasons only

It does work with forth uppercase verbs because the rule about uppercase does not apply when the second character is also an uppercase character

  ToDo: "Ignore dots and maybe other punctuations when in literate style?";

and then I need to restore the non literate mode using
  Set-literate( False )

to ...             range-to     . operator
to ..              range-but    . operator
to ^..     0 swap  range-but    . operator
to ^...    0 swap  range-to     . operator
to ::              range-for    . operator
to ^::     0 swap  range-for    . operator
to ..$       -1    range-but    . operator
to ...$      -1    range-to     . operator
to ::$       -1    range-to     . operator
to ^..$    0 -1    range-but    . operator
to ^...$   0 -1    range-to     . operator
to ^::$    0 -1    range-to     . operator
to []      dup     range-to  @  . operator
to [^]     0  1    range-to  @  . operator
to [$]    -1 -1    range-to  @  . operator
to []!     dup     range-to  @! . operator
to [^]!    0  1    range-to  @! . operator
to [$]!   -1 -1    range-to  @! . operator


to test-hello-range{ ~| expected block |~
  scope >block >expected
  "Hello ranges" expected> block> "test-output{" .run()

to test/ranges
  "range"          test-hello-range{   @( -6 ..  -1  )    }
  "He"             test-hello-range{    (   0 ::  2  ) @  }
  "Hello"          test-hello-range{   @(   0 ::  5  )    }
  "He"             test-hello-range{    (   0 ..  2  ) @  }
  "Hello"          test-hello-range{   @(   0 ..  5  )    }
  "ello"           test-hello-range{   @(   1 ..  5  )    }
  "ello"           test-hello-range{   @(   1 ::  4  )    }
  "ell"            test-hello-range{   @(   1 ... 3  )    }
  "He"             test-hello-range{   @(   ^..   2  )    }
  "Hel"            test-hello-range{   @(   ^...  2  )    }
  "He"             test-hello-range{   @(   ^::   2  )    }
  "Hello range"    test-hello-range{   @(   ^..$     )    }
  "Hello ranges"   test-hello-range{   @(   ^::$     )    }
  "Hello range"    test-hello-range{   @(  0 ..$     )    }
  "Hello ranges"   test-hello-range{   @(  0 ::$     )    }
  "s"              test-hello-range{   @( -1 ::$     )    }
  "es"             test-hello-range{   @( -2 ::$     )    }
  "Hello range"    test-hello-range{   @(  0 ..$     )    }
  "Hello ranges"   test-hello-range{   @(  0 ::$     )    }
  "ranges"         test-hello-range{   @( -6 ::$     )    }
  "ranges"         test-hello-range{   @( -6 ... -1  )    }
ranges/test


out( "End of Inox smoke test" )
