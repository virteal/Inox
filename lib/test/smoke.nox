#!/bin/inox
#  smoke.nox
#   if it terminates, not all hope is lost
#
# December 6 2022 by jhr, extracted from lib/inox.ts, adding oo stuff
# January 11 2022 by jhr, extract to lib/bootstrap.nox

inox-dialect

to make-point x:0 y:0 point:2 inox-make-object.

to test-point
  make-point
  dump
  1 _point.x! ~~ ToDo: _point x:1 .! or even x:1.!
  2 _point.y!
  out( "( x:" & _point.x & ", y:" & _point.y & " )" )
  drop ~~ forget point object
point/test


to point.out method: { out( "( x:" & it.x & ", y:" & it.y & " )" ) };.

to test-method-call
  make-point
  _point .:out
  _point .out()
  drop ~~ forget point object
method-call/test


to test-ii-operations
  with-ii
    out( "Initial ii should be 0, is " & ii )
    increment-ii
    out( "Incremented ii should be 1, is " & ii )
    decrement-ii
    out( "Decremented ii should be 0, is " & ii )
    10 ii!
    out( "New value of ii should be 10, is " & ii )
    out( "++ii should be 11, is " & ++ii )
    out( "ii++ should be 11, is " & ii++ )
    out( "ii-- should be 12, is " & ii-- )
    out( "--ii should be 10, is " & --ii )
    out( "ii should be 10, is "   & ii   )
  without-ii
ii-operations/test


to test-false-while
  while: { 0 } do: { out( "!!! never reached" ) };
false-while/test


to test-break
  while: { true } do: { break }. ~~ ToDo: issue with dot, use token-debugger }.
break/test


to test-forever-while
  while: { true } do: {
    out( "forever" )
    while: { true } do: {
      out( "deeper" )
      while: { true } do: {
        out( "to the limit" )
        break
        out( "!!! never reached, to the limit" )
      };
      break
      out( "!!! never reach, deeper" )
    };
    break
    out( "!!! never reached, forever" )
  };
  out( "test forever ok" )
forever-while/test


to test-loop-break
  with-ii
  2 ii!
  loop: {
    out( "loop-while body" )
    out( "Hello loop " & ii )
    decrement-ii
    if: ii <0? then: { break };
  };
  without-ii
loop-break/test


to times:do:
  times:do/sentinel
  blk| nn| ~~ begin
  if: |nn >0? then: {
    while: {
      ( |nn - 1 ) dup |nn! >=0?
    } do: {
      |blk call
    };
  };
  times:do/jump

to times:loop: times:do:.

to test-times-do
  times: 3 do: { out( "TimeÂ´goes on" ) } ;
times-do/test


to swap/ with /a /b (| |a x|, |b y|, |y |x |).

~~ ToDo: to swap/ with /a /b function: { xxxx }.

to test-swap/
  2 3 swap/
  "2 3 swap/, top should be 2, is "  prefix out
  if: <>? 2 then: { out( "Expected 2 but got " prefix ) debugger };
  "2 3 swap/, next should be 3, is " prefix out drop
  swap/( 4, 5 )
  "swap/( 4, 5 ), top should be 4, is "  prefix out drop
  "swap/( 4, 5 ), next should be 5, is " prefix out drop

out( "About to /swap /debug-test")
"swap/" test


to say:to: swap out out( " " ) out.

say: "Hello" to: "Smalltalk world!".

to hello out( "Hello world!" ).

hello()

forth-dialect ( forth )

: HELLO CR ." Hello forth world!" ;
HELLO

inox-dialect  ~~ back to inox

to test-HELLO
  "HELLO" call-by-name
  "HELLO" definition call
  { HELLO } call
  1 { hello } ?call
  if: 1 then: {
    HELLO
  } else: {
    hello
  };
HELLO/test


to test-loop1
  with-ii
    3 ii!
    while: { decrement-ii, ii >0? } do: {
      if:    ii % 2 =0?
      then:  { out( ii & " is even" ) }
      else:  { out( ii & " is odd"  ) } ;
    } ;
    out( "test loop1 ok 1" )
    times: 3 do: {
      out( "bravo" )
    } ;
    out( "test loop1 ok 2" )
    loop: {
      out( "great" )
      break
    } ;
    out( "test loop1 ok 3, all ok" )
  without-ii
loop1/test


To test-Loop2
  with-ii-do: Begin
    3 ii!
    While --ii >0? Do
      If ii % 2 =0? Then
        out( ii & " is even" )
      Else
        out( ii & " is odd" )
      EndIf
    EndWhile
    Times 3 Loop
      out( "bravo" )
    EndLoop
    Loop
      out( "great" )
      Break
    EndLoop
    Loop
      out( "wonder" )
      Break
    EndLoop
  End
EndTo

Loop2/test


out( "End of smoke test" )
