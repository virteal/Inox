#!inox.sh
# December 6 2022 by jhr, extracted from lib/inox.ts, adding oo stuff

inox-dialect

// dont/inox-log
to word-missing   "word-missing "   out( swap & ) debugger.
to method-missing "method-missing " out( swap & ) debugger drop.

to log inox-log.

to debug
  dont/log
  eval/enable/log
  run/enable/log
  stack/enable/log
  token/enable/log
  do/log

to no-debug
  step/disable/log
  token/disable/log
  dont/log

to test
  dup out( "Testing " & swap )
  dup inox-call-by-name( "test-" & swap )
  out( "End of test for " & swap )

to debug-test
  dup out( "Testing " swap & )
  dup ( "test-" & swap )
  debug
  inox-call-by-name
  no-debug
  out( "End of test for " & swap )

to cast inox-cast.
to as-void    cast( void    ).
to as-integer cast( integer ).

to constant:is: inox-constant-create.
to global:is:   inox-global-create.

to init-constants
  constant: inox-version is: "v0.2";
  constant: void         is: as-void( void:0 );
  constant: true         is: true:1;
  constant: false        is: false:0;

init-constants

to ToDo: out( "ToDo: " & swap ).

to dump
// Debug dump of top of stack. TOS is preserved.
  dup inox-get-class swap
  dup inox-get-type  swap
  dup inox-get-name  swap
  dup inox-get-value swap
  drop
  out(
      "class: "  & _class
    & " type: "  & _type
    & " name: "  & _name
    & " value: " & _value
  )
  drop drop drop

to dump-object
  dup dump
  ToDo: "dump each member";

to with-it     inox-with-it.
to without-it  inox-without-it.
to it          inox-it.
to call        inox-call.
to if          inox-if.
to break       inox-break.
to inline      inox-inline.
to while       inox-while-1 inox-while-2 inox-while-3. inline
to until       inox-while-1 inox-while-2 inox-until-3. inline
to sentinel    inox-sentinel.
to jump        inox-jump.
to loop        inox-loop.


to call:      call.
to if:then:   if call.
to while:do:  while.
to until:do:  until.
to loop:      loop.

// to object.then: if call.
// to object.else: not if call.
// to block.while: while.
// to block.until: until.
// to object.class xxxx.

to method:
  // Store target into the it control variable
  swap
  inox-with-it
    // ToDo: optimize with adding inox-method-call primitive
    call
  // Clear the control stack down to the it variable included
  inox-without-it

to make-object inox-make-object.

to make-point x:0 y:0 point:2 inox-make-object.

make-point

_point dup dump

1 _point.x! // ToDo: _point x:1.!
2 _point.y!
out( "(x:" & _point.x & ",y:" & _point.y & ")" )
to point.out method: { out( "(x:" & it.x & ",y:" & it.y & ")" ) };.



to test-mcall
  dup .:out
  dup .out()
test-mcall

to decrement ( 1 - ).
to increment ( 1 + ).

to with-ii 0 |ii|. inline
to without-ii /ii inox-without. inline
to do-with-ii: with-ii call without-ii.
to ii! |ii!. inline
to ii  |ii. inline
to decrement-ii ii decrement ii!.
to increment-ii ii increment ii!.
to --ii ii decrement dup ii!. // |ii 1 - dup |ii!
to ++ii ii increment dup ii!.
to ii-- ii decrement-ii.
to ii++ ii increment-ii.

to test-ii-operations
  with-ii
    out( "Initial ii should be 0, is " & ii )
    increment-ii
    out( "Incremented ii should be 1, is " & ii )
    decrement-ii
    out( "Decremented ii should be 0, is " & ii )
    10 ii!
    out( "New value of ii should be 10, is " & ii )
    out( "++ii should be 11, is " & ++ii )
    out( "ii++ should be 11, is " & ii++ )
    out( "ii-- should be 12, is " & ii-- )
    out( "--ii should be 10, is " & --ii )
    out( "ii should be 10, is "   & ii   )
  without-ii
ii-operations/test

to test-false-while
  while: { 0 } do: { out( "!!! never reached" ) };
false-while/test

to test-break
  while: { true } do: { break }.
break/test

to test-forever-while
  while: { true } do: {
    out( "forever" )
    while: { true } do: {
      out( "deeper" )
      while: { true } do: {
        out( "to the limit" )
        break
        out( "!!! never reached, to the limit" )
      };
      break
      out( "!!! never reach, deeper" )
    };
    break
    out( "!!! never reached, forever" )
  };
  out( "test forever ok" )
forever-while/test

to if-else inox-if-else.
to if:then:else: if-else call.

to loop:while: swap dup call while.

to test-loop-while
  with-ii
  3 ii!
  loop: {
    out( "Hello loop " & ii )
    decrement-ii
  } while: { out( "test" ), ii >0? };
  without-ii
loop-while/test


to times:do:
  times:do/sentinel
  |blk| |nn| // begin
  if: |nn >0? then: {
    while: {
      ( |nn - 1 ) dup |nn! >=0?
    } do: {
      |blk call
    };
  };
  times:do/jump

to test-times-do
  times: 3 do: { out( "TimeÂ´goes on" ) } ;
times-do/test


to try:
  try/sentinel
    call
  try/jump

to try:catch:
  try:catch/sentinel
    |catch|
    if: inox-mark then: {
      call
    } else: {
      |catch call
    };
  try:catch/jump

to try:catch:finally:
  try:catch:finally/sentinel
    |finally|
    try:catch:;
    |finally call
  try:catch:finally/jump

to say:to: swap out out( " " ) out.

say: "Hello" to: "Smalltalk world!".

to hello out( "Hello world!" ).

hello()

forth-dialect ( forth )

: HELLO CR ." Hello forth world!" ;
HELLO

inox-dialect // inox

to test-HELLO
  "HELLO" inox-call-by-name
  "HELLO" inox-definition call
  { HELLO } call
  1 { hello } if call
  if: 1 then: {
    HELLO
  } else: {
    hello
  };
HELLO/test

to test-loop1
  with-ii
    3 ii!
    while: { decrement-ii, ii >0? } do: {
      if:    ii % 2 =0?
      then:  { out( ii & " is even" ) }
      else:  { out( ii & " is odd"  ) } ;
    } ;
    out( "test loop1 ok 1" )
    times: 3 do: {
      out( "bravo" )
    } ;
    out( "test loop1 ok 2" )
    loop: {
      out( "great" )
      break
    } ;
    out( "test loop1 ok 3, all ok" )
  without-ii
loop1/test


to InoxStyle
  inox-dialect // set define builder and comment delimiters
  inox-alias( "Define",      " to "            )
  inox-alias( "While",       " while: { "      )
  inox-alias( "Until",       " until: { "      )
  inox-alias( "Repeat",      " } do: { "       )
  inox-alias( "Do",          " do: { "         )
  inox-alias( "Loop",        " loop: { "       )
  inox-alias( "Break",       " break "         )
  inox-alias( "End",         " } ; "           )
  inox-alias( "If",          " if: "           )
  inox-alias( "Then",        " then: { "       )
  inox-alias( "Else",        " } else: { "     )
  inox-alias( "Times",       " times: "        )

  // macro( "Debug"       "$$"                )
  // macro( "NoDebug"     ""                  )

InoxStyle

debug

Define test-Loop2
  with-ii
    3 ii!
    While decrement-ii, ii >0? Repeat
      If ii % 2 =0? Then
        out( ii & " is even" )
      Else
        out( ii & " is odd" )
      End
    End
    Times 3 Do
      out( "bravo" )
    End
    Loop
      out( "great" )
      Break
    End
  without-ii
End

Loop2/test

out( "End of smoke test" )
