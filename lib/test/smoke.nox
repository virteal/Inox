/* Inox */

to word-missing   "word-missing "   out( swap & ).
to method-missing "method-missing " out( swap & ).

#do inox-log
debugger
to xxx .out().
debugger

#dont inox-log

to aaa
  constant: void         is: as_void( void:0 );

to word-missing   "word-missing "   out( swap & ).
to method-missing "method-missing " out( swap & ).

to test
  dup out( "Testing " swap & )
  dup inox-call-by-name( test_ swap & )
  out( "End of test for " swap & )

to cast inox-cast.

to as_void    cast( void    ).
to as_integer cast( integer ).
to as_pointer cast( pointer ).

to constant:is: inox-constant.
to global:is:   inox-global.

to init-constants
  constant: inox-version is: "v0.1";
  constant: void         is: as_void( void:0 );
  constant: true         is: true:1;
  constant: false        is: false:0;

init-constants

to ToDo out( "ToDo: " & swap ).

global: ii is: 0;

to make-pointer inox-make-pointer.

to make_point x:0 y:0 point:2 make-pointer.

make_point

to dump
// Debug dump of top of stack. TOS is preserved.
  dup inox-get-type  swap
  dup inox-get-name  swap
  dup inox-get-value swap
  drop
  out(
    "type:"      & _type
    & " name: "  & _name
    & " value: " & _value
  )
  drop drop drop

dup dump

to dump-object
  dup dump
  // ToDo: dump each member

dump-object

1 _point.x! // ToDo: x:1 _point.!
2 _point.y!
out( "(x:" & _point.x & ",y:" & _point.y & ")" )

to use:to: { swap inox-to-control }

to method: inox-with-it inox-call inox-from-control.

to it |it.

#do inox-log

to point:out method: { out( "(x:" & it.x & ",y:" & it.y & ")" ) };.

to test_mcall
  dup .out
  dup .:out
  dup .out()

debugger
test_mcall

to decrement 1  - .
to increment 1  + .

to set_ii @ ii @set!.

to decrement_ii ii decrement set_ii.

to increment_ii ii increment set_ii.

to if:then: // boolean block
  inox-if inox-call
.

to with:do: inox-call drop.

to test_with_do
  with: _point do: {
    .out()
  }

test( #with_do )

to break inox-break.

debugger
to inox-while inox-while-1 inox-while-2 inox-while-3. inox-inlined

to while:do: // condition-block repeat-block
  inox-while
. inox-inlined

to until:do: // condition-block repeat-block
  inox-while-1 inox-while-2 inox-until-3
. inox-inlined

to test_false_while
  while: { 0 } do: { out( "!!! never reached" ) };
  out( "test_false_while ok" )

to test_noop.

debugger

test( #noop )

test( #false_while )

to test_forever_while
  while: { 1 } do: {
    out( "forever" )
    while: { 1 } do: {
      out( "deeper" )
      while: { 1 } do: {
        out( "to the limit" )
        break
        out( "!!! never reached, to the limit" )
      };
      break
      out( "!!! never reach, deeper" )
    };
    break
    out( "!!! never reached, forever" )
  };
  out( "test forever ok" )

test( #forever_while )

to if:then:else: // boolean then-block else-block --
  inox-ifelse
  inox-call

to loop:while: // repeat-block condition-block --
  swap dup inox-call
  inox-while
. inox-inlined

to test_loop_while
  set_ii( 3 )
  loop: {
    out( "Hello loop " & ii )
    decrement_ii
  } while: { out( "test" ) ( ii > 0 ) };
  out( "test loop while ok" )

test( #loop_while )

to times:do: |blk| |nn|
  if: |nn >? 0
  then: {
    while: {
      |nn 1 - dup |nn! >=? 0
    } do: {
      |blk inox-call
    };
  };
  break

to test_times_do
  times: 3 do: { out( "TimeÂ´goes on" ) } ;
  out( "test times ok" )

test( #times_do )

to loop: inox-loop.

global: #II is: 0.

to @II @ II.

out( "Address of II is " & @ II )

"Indirect II set" @II @set

out( "New II is : " & ( @II @get ) )

out( "II is " & II )

out( "Hello " & Place & "!" )

to try: inox-enter inox-call inox-leave;

to try:catch:
  inox-enter
  |catch|
  if: inox-mark then: {
    inox-call
  } else: {
    |catch inox-call
  }
  inox-leave

to try:catch:finally:
  inox-enter
  |finally|
  try:catch:
  |finally inox-call
  inox-leave

to say:to: swap out out( " " ) out.

say: "Hello" to: "Smalltalk world!".

( (+ 1 2) + (100 + 100) )
inox-trace(
  (
    (3 +)
    +(4)
    (+ 1000)
    + 2000
  )
)
out

to hello out( "Hello world!" ).

hello()

forth-dialect ( forth )

: HELLO CR ." Hello forth world!" ;
HELLO

inox-dialect // inox

to test_HELLO
  "HELLO" inox-call-by-name
  "HELLO" inox-definition inox-call
  { HELLO } inox-call
  { hello } 1 inox-if inox-call
  if: 1 then: {
    HELLO
  } else: {
    hello
  };
.

test( #HELLO )


to test_loop1
  set_ii( 3 )
  while: { decrement_ii, ii >? 0 } do: {
    if:    ii % 2 is= 0
    then:  { out( ii & " is even" ) }
    else:  { out( ii & " is odd"  ) } ;
  } ;
  out( "test loop1 ok 1" )
  times: 3 do: {
    out( "bravo" )
  } ;
  out( "test loop1 ok 2" )
  loop: {
    out( "great" )
    break
  } ;
  out( "test loop1 ok 3, all ok" )

test( #loop1 )


to InoxStyle
  inox-dialect // set define builder and comment delimiters
  inox-alias( "Define",      " to "            )
  inox-alias( "While",       " while: { "      )
  inox-alias( "Until",       " until: { "      )
  inox-alias( "Repeat",      " } do: { "       )
  inox-alias( "Do",          " do: { "         )
  inox-alias( "Loop",        " loop: { "       )
  inox-alias( "Break",       " break "         )
  inox-alias( "End",         " } ; "           )
  inox-alias( "If",          " if: "           )
  inox-alias( "Then",        " then: { "       )
  inox-alias( "Else",        " } else: { "     )
  inox-alias( "Times",       " times: "        )

  // macro( "Debug"       "$$"                )
  // macro( "NoDebug"     ""                  )

InoxStyle

Define test_Loop2
  set_ii( 3 )
  While decrement_ii, ii > 0 Repeat
    If ii % 2 =? 0 Then
      out( ii & " is even" )
    Else
      out( ii & " is odd")
    End
  End
  Times 3 Do
    out( "bravo" )
  End
  Loop
    out( "great" )
    Break
  End
End

test( Loop2 )


forth-dialect ( Forth )

( First I need to define some standard Forth words )

: C@ @get ; \\ Get content from address, as a character in Forth
: C! @set ; \\ Set content from value and address
: RSHIFT >>> ;
: 2DROP DROP DROP ;
: 0= 0 is= ;
: 0< 0 < ;
: 0<> 0 not= ;
: 1+ 1 + ;
: I ii ;
: DO for_II inox-begin-block ;
: +LOOP inox-end-block swap next_ii ;
: LOOP inox-end-block 1 next_ii ;

debugger



